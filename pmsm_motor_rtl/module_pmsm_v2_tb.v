/*
*****************************************************    Generated by an AI language model   ******************************************************

This testbench code generates a clock signal, drives the V_phase input with different values, and prints the resulting speed and position outputs. 
You can modify the test cases as needed to cover different scenarios and verify the correctness of your design.
*/

/*
**********      How to run this simulation       *************
One popular open-source Verilog simulator is Icarus Verilog. You can download it from its official website: http://iverilog.icarus.com/. 
Another popular simulator is Verilator, which is available for download from its official website: https://www.veripool.org/wiki/verilator.

Once you have installed a simulator, you can compile the Verilog code and testbench using the following command:

iverilog -o pmsm_tb pmsm.v pmsm_tb.v
This will generate an executable file called "pmsm_tb" that can be run using the following command:

vvp pmsm_tb
This will simulate the testbench code and produce output waveforms. You can view these waveforms using a waveform viewer like GTKWave or the simulator's built-in waveform viewer.

To generate plots, you may need to export the simulation data to a data format that can be used by a plotting tool like Python's matplotlib or GNU Octave. 
You can do this by adding $dumpfile and $dumpvars commands to the testbench code, like so:

initial begin
  $dumpfile("pmsm_tb.vcd");
  $dumpvars(0, pmsm);
end
This will generate a VCD (value change dump) file that contains the simulation data. You can then load this file into a plotting tool and generate plots.

I hope this helps you get started with simulating and plotting the Verilog code.
*/

`timescale 1ns / 1ps
`include "module_pmsm_v2.v"

module module_pmsm_v2_tb;

  // Inputs
  reg clk;
  reg [2:0] V_phase;

  // Outputs
  wire [15:0] I_a;
  wire [15:0] I_b;
  wire [15:0] I_c;
  wire [15:0] torque;
  wire [15:0] speed;
  wire [15:0] position;

  integer elapsed_time;
  integer counter;

  // Instantiate the module to be tested
  PMSM_v2 dut (
    .clk(clk),
    .V_phase(V_phase),
    .I_a(I_a),
    .I_b(I_b),
    .I_c(I_c),
    .torque(torque),
    .speed(speed),
    .position(position)
  );

  // Stimulus generator
  initial begin
    $dumpfile("module_pmsm_v2_tb.vcd");
    $dumpvars(0, module_pmsm_v2_tb);
        // Set initial values
    clk = 0;
    V_phase = 3'b000;
    counter = 0;
    elapsed_time = 0;
    //#5 position = 16'h1000; // set initial position to 4096
    //#2000 $finish;
  
  repeat (500) begin  // Repeat for 200 clock cycles
    // Increment the counter and wrap around to 0 after 6
    counter = counter + 1;
    if (counter == 7) counter = 0;

    // Set the voltage based on the counter value
    case (counter)
      0: V_phase = 3'b001;
      1: V_phase = 3'b010;
      2: V_phase = 3'b100;
      3: V_phase = 3'b011;
      4: V_phase = 3'b110;
      5: V_phase = 3'b101;
      6: V_phase = 3'b111;
      default: V_phase = 3'b111;
    endcase

    #10;  // Wait for 10 ns
    elapsed_time = elapsed_time + 10;  // Increment elapsed time by 10 ns
  end
  $finish;  //Terminate simulation
  end

  // Clock generation
  always #10 clk = ~clk;
 /*
  initial begin
    // Test case 1
    #100;
    V_phase = 3'b001;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // Test case 2
    V_phase = 3'b010;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // Test case 3
    V_phase = 3'b011;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // Test case 4
    V_phase = 3'b100;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // Test case 5
    V_phase = 3'b101;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // Test case 6
    V_phase = 3'b110;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // Test case 7
    V_phase = 3'b111;
    #100;
    elapsed_time += 100;
    $display("speed=%d, position=%d", speed, position);

    // End simulation
    
  end
*/
endmodule
