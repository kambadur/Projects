$date
	Wed Jun 08 11:07:27 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_bcd_fadd_1digit $end
$var wire 4 ! sum [3:0] $end
$var wire 1 " cout $end
$var reg 4 # a [3:0] $end
$var reg 4 $ b [3:0] $end
$var reg 1 % cin $end
$scope module uut $end
$var wire 4 & a [3:0] $end
$var wire 4 ' b [3:0] $end
$var wire 1 % cin $end
$var wire 4 ( sum_binAdd [3:0] $end
$var wire 4 ) cout_binAdd [3:0] $end
$var reg 1 " cout $end
$var reg 4 * sum [3:0] $end
$scope begin fa[1] $end
$scope module fadd_inst1 $end
$var wire 1 + a $end
$var wire 1 , b $end
$var wire 1 - cin $end
$var wire 1 . cout $end
$var wire 1 / sum $end
$upscope $end
$upscope $end
$scope begin fa[2] $end
$scope module fadd_inst1 $end
$var wire 1 0 a $end
$var wire 1 1 b $end
$var wire 1 2 cin $end
$var wire 1 3 cout $end
$var wire 1 4 sum $end
$upscope $end
$upscope $end
$scope begin fa[3] $end
$scope module fadd_inst1 $end
$var wire 1 5 a $end
$var wire 1 6 b $end
$var wire 1 7 cin $end
$var wire 1 8 cout $end
$var wire 1 9 sum $end
$upscope $end
$upscope $end
$scope module fadd_inst0 $end
$var wire 1 : a $end
$var wire 1 ; b $end
$var wire 1 % cin $end
$var wire 1 < cout $end
$var wire 1 = sum $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0=
0<
0;
0:
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
b0 *
b0 )
b0 (
b0 '
b0 &
0%
b0 $
b0 #
0"
b0 !
$end
#50000
b100 !
b100 *
b100 (
14
12
b10 )
1.
1,
1+
b10 $
b10 '
b10 #
b10 &
#100000
04
02
0"
b1000 !
b1000 *
b1000 (
19
0.
17
b100 )
13
0,
11
0+
10
b100 $
b100 '
b100 #
b100 &
#150000
1"
b10 !
b10 *
b1100 (
14
12
b110 )
1.
1,
1+
b110 $
b110 '
b110 #
b110 &
#200000
b110 !
b110 *
04
b0 (
09
02
07
0.
03
b1000 )
18
0,
01
16
0+
00
15
b1000 $
b1000 '
b1000 #
b1000 &
#250000
b1010 !
b1010 *
b100 (
14
12
b1010 )
1.
1,
1+
b1010 $
b1010 '
b1010 #
b1010 &
#300000
04
02
b1110 !
b1110 *
b1000 (
19
0.
17
b1100 )
13
0,
11
0+
10
b1100 $
b1100 '
b1100 #
b1100 &
#350000
b10 !
b10 *
b1100 (
14
12
b1110 )
1.
1,
1+
b1110 $
b1110 '
b1110 #
b1110 &
#400000
0"
b0 !
b0 *
04
b0 (
09
02
07
0.
03
b0 )
08
0,
01
06
0+
00
05
b0 $
b0 '
b0 #
b0 &
#450000
b100 !
b100 *
b100 (
14
12
b10 )
1.
1,
1+
b10 $
b10 '
b10 #
b10 &
#500000
04
02
0"
b1000 !
b1000 *
b1000 (
19
0.
17
b100 )
13
0,
11
0+
10
b100 $
b100 '
b100 #
b100 &
#550000
1"
b10 !
b10 *
b1100 (
14
12
b110 )
1.
1,
1+
b110 $
b110 '
b110 #
b110 &
#600000
b110 !
b110 *
04
b0 (
09
02
07
0.
03
b1000 )
18
0,
01
16
0+
00
15
b1000 $
b1000 '
b1000 #
b1000 &
#650000
b1010 !
b1010 *
b100 (
14
12
b1010 )
1.
1,
1+
b1010 $
b1010 '
b1010 #
b1010 &
#700000
04
02
b1110 !
b1110 *
b1000 (
19
0.
17
b1100 )
13
0,
11
0+
10
b1100 $
b1100 '
b1100 #
b1100 &
#750000
b10 !
b10 *
b1100 (
14
12
b1110 )
1.
1,
1+
b1110 $
b1110 '
b1110 #
b1110 &
#800000
0"
b0 !
b0 *
04
b0 (
09
02
07
0.
03
b0 )
08
0,
01
06
0+
00
05
b0 $
b0 '
b0 #
b0 &
#850000
b100 !
b100 *
b100 (
14
12
b10 )
1.
1,
1+
b10 $
b10 '
b10 #
b10 &
#900000
04
02
0"
b1000 !
b1000 *
b1000 (
19
0.
17
b100 )
13
0,
11
0+
10
b100 $
b100 '
b100 #
b100 &
#950000
1"
b10 !
b10 *
b1100 (
14
12
b110 )
1.
1,
1+
b110 $
b110 '
b110 #
b110 &
#1000000
04
09
02
07
0.
03
b1000 )
18
b111 !
b111 *
0,
01
16
0+
00
15
b1 (
1=
b1000 $
b1000 '
b1000 #
b1000 &
1%
#1050000
b1011 !
b1011 *
b101 (
14
12
b1010 )
1.
1,
1+
b1010 $
b1010 '
b1010 #
b1010 &
#1100000
04
02
19
0.
17
b1100 )
13
b1110 !
b1110 *
0,
11
0+
10
b1000 (
0=
b1100 $
b1100 '
b1100 #
b1100 &
0%
#1150000
b10 !
b10 *
b1100 (
14
12
b1110 )
1.
1,
1+
b1110 $
b1110 '
b1110 #
b1110 &
#1200000
0"
b0 !
b0 *
04
b0 (
09
02
07
0.
03
b0 )
08
0,
01
06
0+
00
05
b0 $
b0 '
b0 #
b0 &
#1250000
b100 !
b100 *
b100 (
14
12
b10 )
1.
1,
1+
b10 $
b10 '
b10 #
b10 &
#1300000
04
02
0"
b1000 !
b1000 *
b1000 (
19
0.
17
b100 )
13
0,
11
0+
10
b100 $
b100 '
b100 #
b100 &
#1350000
1"
b10 !
b10 *
b1100 (
14
12
b110 )
1.
1,
1+
b110 $
b110 '
b110 #
b110 &
#1400000
b110 !
b110 *
04
b0 (
09
02
07
0.
03
b1000 )
18
0,
01
16
0+
00
15
b1000 $
b1000 '
b1000 #
b1000 &
#1450000
b1010 !
b1010 *
b100 (
14
12
b1010 )
1.
1,
1+
b1010 $
b1010 '
b1010 #
b1010 &
#1500000
04
02
b1110 !
b1110 *
b1000 (
19
0.
17
b1100 )
13
0,
11
0+
10
b1100 $
b1100 '
b1100 #
b1100 &
#1550000
b10 !
b10 *
b1100 (
14
12
b1110 )
1.
1,
1+
b1110 $
b1110 '
b1110 #
b1110 &
#1600000
0"
b0 !
b0 *
04
b0 (
09
02
07
0.
03
b0 )
08
0,
01
06
0+
00
05
b0 $
b0 '
b0 #
b0 &
#1650000
b100 !
b100 *
b100 (
14
12
b10 )
1.
1,
1+
b10 $
b10 '
b10 #
b10 &
#1700000
04
02
0"
b1000 !
b1000 *
b1000 (
19
0.
17
b100 )
13
0,
11
0+
10
b100 $
b100 '
b100 #
b100 &
#1750000
1"
b10 !
b10 *
b1100 (
14
12
b110 )
1.
1,
1+
b110 $
b110 '
b110 #
b110 &
#1800000
b110 !
b110 *
04
b0 (
09
02
07
0.
03
b1000 )
18
0,
01
16
0+
00
15
b1000 $
b1000 '
b1000 #
b1000 &
#1850000
b1010 !
b1010 *
b100 (
14
12
b1010 )
1.
1,
1+
b1010 $
b1010 '
b1010 #
b1010 &
#1900000
04
02
b1110 !
b1110 *
b1000 (
19
0.
17
b1100 )
13
0,
11
0+
10
b1100 $
b1100 '
b1100 #
b1100 &
#1950000
b10 !
b10 *
b1100 (
14
12
b1110 )
1.
1,
1+
b1110 $
b1110 '
b1110 #
b1110 &
#2000000
0"
04
09
02
07
0.
03
b0 )
08
b1 !
b1 *
0,
01
06
0+
00
05
b1 (
1=
b0 $
b0 '
b0 #
b0 &
1%
